openapi: 3.0.0
x-stoplight:
  id: zur6c0dxx3z8a
info:
  title: API
  version: '1.0'
  description: Salvation Clinic International Ministries API Documentaion
  contact:
    name: Nana Kwesi Ofosu-Aikins
    email: nanaaikinson24@gmail.com
servers:
  - url: 'https://api.scimapp.org'
    description: ''
  - url: 'https://staging-api.scimapp.org'
    description: ''
tags:
  - name: backoffice
  - name: client
paths:
  /auth/login:
    post:
      summary: ''
      tags:
        - client
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
      operationId: auth-login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      description: Auth login
  /auth/social:
    post:
      summary: ''
      tags:
        - client
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
      operationId: social-auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SocialAuthRequest'
      description: Auth social authentication
    parameters: []
  /auth/register:
    post:
      summary: ''
      tags:
        - client
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
      operationId: auth-register
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      description: Auth register
    parameters: []
  /auth/resend-email-verification:
    post:
      summary: ''
      tags:
        - client
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
      operationId: auth-resend-email-verification
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmailRequest'
      description: Auth resend email verification
    parameters: []
  /auth/forgot-password:
    post:
      summary: ''
      tags:
        - client
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
      operationId: auth-forgot-password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmailRequest'
      description: Auth forgot password
    parameters: []
  /auth/verify-account:
    patch:
      summary: ''
      tags:
        - client
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
      operationId: auth-verify-account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyAccountRequest'
      description: Auth account verification
    parameters: []
  /auth/reset-password:
    patch:
      summary: ''
      tags:
        - client
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
      operationId: auth-reset-password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPasswordRequest'
      description: Auth reset password
    parameters: []
  /auth/verify-code:
    post:
      summary: ''
      tags:
        - client
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerifyCodeResponse'
      operationId: auth-verify-code
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyEmailRequest'
      description: Auth verify code
    parameters: []
  /auth/update-user-avatar:
    patch:
      summary: ''
      tags:
        - client
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateAvatarResponse'
      operationId: auth-update-avatar
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAvatarRequest'
      description: Auth update user avatar
      security:
        - X-USER-TOKEN: []
    parameters: []
  /auth/update-user-details:
    patch:
      summary: ''
      tags:
        - client
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthUser'
      operationId: auth-update-user-details
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserDetailsRequest'
      description: Auth update user details
      security:
        - X-USER-TOKEN: []
    parameters: []
  /auth/refresh-token:
    get:
      summary: ''
      tags:
        - client
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefreshTokenResponse'
      operationId: auth-refresh-token
      description: Auth refresh token
      security:
        - X-USER-TOKEN: []
    parameters: []
  /auth/user:
    get:
      summary: ''
      tags:
        - client
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthUser'
      operationId: auth-user
      description: 'Auth: Get user'
      security:
        - X-USER-TOKEN: []
    parameters: []
  /podcasts:
    get:
      summary: ''
      tags:
        - client
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPodcastsResponse'
      operationId: get-podcasts
      description: 'Client: Get podcasts'
      parameters:
        - schema:
            type: number
          in: query
          name: limit
        - schema:
            type: number
          in: query
          name: page
        - schema:
            type: string
          in: query
          name: search
        - schema:
            type: string
            enum:
              - newest
              - oldest
          in: query
          name: sort
  /podcasts/all:
    get:
      summary: ''
      tags:
        - client
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPodcastsResponse'
      operationId: get-all-podcasts
      description: 'Client: Get all podcasts'
      parameters:
        - schema:
            type: string
            enum:
              - newest
              - oldest
          in: query
          name: sort
    parameters: []
  '/podcasts/{podcastId}':
    parameters:
      - schema:
          type: string
        name: podcastId
        in: path
        required: true
    get:
      summary: ''
      tags:
        - client
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Podcast'
      operationId: get-podcast
      description: 'Client: Get podcast'
  '/podcasts/{podcastId}/like':
    parameters:
      - schema:
          type: string
        name: podcastId
        in: path
        required: true
    patch:
      summary: ''
      tags:
        - client
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '401':
          description: Unauthorized
      operationId: like-podcast
      description: 'Client: Like podcast'
      security:
        - X-USER-TOKEN: []
  '/podcasts/{podcastId}/comments':
    parameters:
      - schema:
          type: string
        name: podcastId
        in: path
        required: true
    post:
      summary: ''
      tags:
        - client
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        '401':
          description: Unauthorized
      operationId: comment-podcast
      description: 'Client: Comment on a podcast'
      security:
        - X-USER-TOKEN: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentRequest'
    get:
      summary: ''
      operationId: get-podcast-comments
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentsResponse'
      description: 'Client: Get podcast comments'
      tags:
        - client
  '/podcasts/{podcastId}/comment/{commentId}':
    parameters:
      - schema:
          type: string
        name: podcastId
        in: path
        required: true
      - schema:
          type: string
        name: commentId
        in: path
        required: true
    patch:
      summary: ''
      tags:
        - client
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        '401':
          description: Unauthorized
      operationId: update-podcast-comment
      description: 'Client: Update podcast comment'
      security:
        - X-USER-TOKEN: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentRequest'
    delete:
      summary: ''
      operationId: delete-podcast-comment
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
      description: Delete podcast comment
      security:
        - X-USER-TOKEN: []
      tags:
        - client
  /playlists:
    get:
      summary: ''
      tags:
        - client
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlaylistsResponse'
      operationId: get-playlists
      security:
        - X-USER-TOKEN: []
      description: Get playlists
    post:
      summary: ''
      operationId: create-playlist
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Playlist'
      security:
        - X-USER-TOKEN: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StorePlaylistRequest'
      tags:
        - client
      description: Create playlist
  '/playlists/{playlistId}':
    parameters:
      - schema:
          type: string
        name: playlistId
        in: path
        required: true
    get:
      summary: ''
      tags:
        - client
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Playlist'
      operationId: get-playlist
      description: 'Client: Get playlist'
      security:
        - X-USER-TOKEN: []
    patch:
      summary: ''
      operationId: update-playlist
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Playlist'
      description: 'Client: Update playlist'
      security:
        - X-USER-TOKEN: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StorePlaylistRequest'
      tags:
        - client
    delete:
      summary: ''
      operationId: delete-playlist
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
      description: 'Client: Delete playlist'
      security:
        - X-USER-TOKEN: []
      tags:
        - client
  '/playlists/{playlistId}/podcasts':
    parameters:
      - schema:
          type: string
        name: playlistId
        in: path
        required: true
    patch:
      summary: ''
      operationId: delete-playlist-podcasts
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
      security:
        - X-USER-TOKEN: []
      tags:
        - client
      description: 'Client: Delete playlist podcasts'
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlaylistPodcastsRequest'
    post:
      summary: ''
      operationId: add-playlist-podcasts
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
      description: 'Client: Add podcasts to playlist'
      security:
        - X-USER-TOKEN: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlaylistPodcastsRequest'
        description: ''
      tags:
        - client
  /prayer-requests:
    get:
      summary: ''
      tags:
        - client
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PrayersResponse'
      operationId: get-prayer-requests
      security:
        - X-USER-TOKEN: []
      parameters:
        - schema:
            type: string
            enum:
              - newest
              - oldest
          in: query
          name: sort
      description: 'Client: Get my prayers'
    post:
      summary: ''
      operationId: request-prayer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Prayer'
      description: 'Client: Request prayer'
      security:
        - X-USER-TOKEN: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PrayerRequest'
      tags:
        - client
  /posts:
    get:
      summary: ''
      tags:
        - client
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostsResponse'
      operationId: get-posts
      description: 'Client: get posts'
      parameters:
        - schema:
            type: string
            enum:
              - announcement
              - blog post
          in: query
          name: postType
          required: true
  '/posts/{postId}':
    get:
      summary: ''
      tags:
        - client
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '404':
          description: Not Found
      operationId: get-post
      description: 'Client: get post'
      parameters:
        - schema:
            type: number
          in: query
          name: page
        - schema:
            type: number
          in: query
          name: limit
        - schema:
            type: string
          in: query
          name: search
    parameters:
      - schema:
          type: string
        name: postId
        in: path
        required: true
  '/posts/{postId}/comments':
    get:
      summary: ''
      tags:
        - client
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentsResponse'
        '404':
          description: Not Found
      operationId: get-post-comments
      description: 'Client: get post comments'
    parameters:
      - schema:
          type: string
        name: postId
        in: path
        required: true
    post:
      summary: ''
      operationId: create-post-comment
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
      description: 'Client: create post comment'
      security:
        - X-USER-TOKEN: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentRequest'
        description: ''
      tags:
        - client
  '/posts/{postId}/comments/{commentId}':
    delete:
      summary: ''
      tags:
        - client
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '404':
          description: Not Found
      operationId: delete-post-comment
      description: 'Client: delete post comment'
      security:
        - X-USER-TOKEN: []
    parameters:
      - schema:
          type: string
        name: postId
        in: path
        required: true
      - schema:
          type: string
        name: commentId
        in: path
        required: true
    patch:
      summary: ''
      operationId: update-post-comment
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
      description: 'Client: update post comment'
      security:
        - X-USER-TOKEN: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentRequest'
        description: ''
      tags:
        - client
  /events:
    get:
      summary: ''
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventsResponse'
      operationId: get-events
      description: Get events
      parameters:
        - schema:
            type: integer
          in: query
          name: page
        - schema:
            type: integer
          in: query
          name: limit
        - schema:
            type: string
          in: query
          name: search
      tags:
        - client
    parameters: []
  '/events/{eventId}':
    get:
      summary: ''
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
      operationId: get-event
      description: Get event
      parameters: []
      tags:
        - client
    parameters:
      - schema:
          type: string
        name: eventId
        in: path
        required: true
  /home:
    get:
      summary: ''
      tags:
        - client
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HomeDataResponse'
      operationId: get-home-data
      description: 'Client: Get home data'
  /transactions:
    get:
      summary: ''
      tags:
        - client
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionsResponse'
      operationId: get-transactions
      description: Get transactions
      security:
        - X-USER-TOKEN: []
      parameters:
        - schema:
            type: string
            enum:
              - all
              - today
              - last_week
              - last_month
          in: query
          name: filter
          required: true
        - schema:
            type: number
          in: query
          name: page
        - schema:
            type: number
          in: query
          name: limit
        - schema:
            type: string
          in: query
          name: search
    post:
      summary: ''
      operationId: transact
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
      description: Transact
      security:
        - X-USER-TOKEN: []
      tags:
        - client
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactRequest'
        description: ''
  '/transactions/{transactionId}':
    get:
      summary: ''
      tags:
        - client
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
      operationId: get-transaction
      description: Get transaction
      security:
        - X-USER-TOKEN: []
      parameters: []
    parameters:
      - schema:
          type: string
        name: transactionId
        in: path
        required: true
  /files:
    post:
      summary: ''
      tags:
        - client
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileResponse'
      operationId: upload-file
      description: 'Client: Upload file'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              x-examples:
                Example 1:
                  file: ''
                  uploadType: avatar
              properties:
                file:
                  type: string
                  format: binary
                uploadType:
                  type: string
                  enum:
                    - testimony
                    - excerpt
                    - avatar
              required:
                - file
                - uploadType
    parameters: []
  '/files/{fileKey}':
    parameters:
      - schema:
          type: string
        name: fileKey
        in: path
        required: true
    delete:
      summary: ''
      tags:
        - client
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
      operationId: delete-file
      description: Delete file
    get:
      summary: ''
      operationId: get-file-url
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileResponse'
      description: Retrieve file url
      tags:
        - client
  /backoffice/events:
    get:
      summary: ''
      tags:
        - backoffice
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventsResponse'
      operationId: backoffice-get-events
      description: 'Backoffice: Get events'
      security:
        - X-USER-TOKEN: []
      parameters:
        - schema:
            type: integer
          in: query
          name: page
        - schema:
            type: integer
          in: query
          name: limit
        - schema:
            type: string
          in: query
          name: search
    post:
      summary: ''
      operationId: backoffice-create-event
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
      description: 'Backoffcie: Create event'
      security:
        - X-USER-TOKEN: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventRequest'
      tags:
        - backoffice
  '/backoffice/events/{eventId}':
    get:
      summary: ''
      tags:
        - backoffice
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
      operationId: backoffice-get-event
      description: 'Backoffice: Get event'
      security:
        - X-USER-TOKEN: []
      parameters: []
    parameters:
      - schema:
          type: string
        name: eventId
        in: path
        required: true
    patch:
      summary: ''
      operationId: backoffice-update-event
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
      description: 'Backoffice: Update event'
      security:
        - X-USER-TOKEN: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventRequest'
      tags:
        - backoffice
    delete:
      summary: ''
      operationId: backoffice-delete-event
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
      description: 'Backoffice: Delete event'
      security:
        - X-USER-TOKEN: []
      tags:
        - backoffice
  /backoffice/posts:
    get:
      summary: ''
      tags:
        - backoffice
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostsResponse'
      operationId: backoffice-get-posts
      description: 'Backoffice: Get posts'
      security:
        - X-USER-TOKEN: []
      parameters:
        - schema:
            type: string
            enum:
              - all
              - announcement
              - blog post
          in: query
          name: postType
          required: true
        - schema:
            type: number
          in: query
          name: page
        - schema:
            type: number
          in: query
          name: limit
        - schema:
            type: string
          in: query
          name: search
    post:
      summary: ''
      operationId: backoffice-create-post
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
      tags:
        - backoffice
      description: 'Backoffice: Create post'
      security:
        - X-USER-TOKEN: []
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StorePostRequest'
  '/backoffice/posts/{postId}':
    parameters:
      - schema:
          type: string
        name: postId
        in: path
        required: true
    get:
      summary: ''
      tags:
        - backoffice
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
      operationId: backoffice-get-post
      description: 'Backoffice: Get post'
      security:
        - X-USER-TOKEN: []
    patch:
      summary: ''
      operationId: backoffice-update-post
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
      description: 'Backoffice: update post'
      security:
        - X-USER-TOKEN: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StorePostRequest'
      tags:
        - backoffice
    delete:
      summary: ''
      operationId: backoffice-delete-post
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
      tags:
        - backoffice
      description: 'Backoffice: delete post'
      security:
        - X-USER-TOKEN: []
  /backoffice/prayer-requests:
    get:
      summary: ''
      tags:
        - backoffice
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PrayersResponse'
      operationId: backoffice-get-prayers
      description: 'Backoffice: Get prayer requests'
      security:
        - X-USER-TOKEN: []
      parameters:
        - schema:
            type: number
          in: query
          name: page
        - schema:
            type: number
          in: query
          name: limit
        - schema:
            type: string
          in: query
          name: search
    parameters: []
  '/backoffice/prayer-requests/{prayerId}':
    get:
      summary: ''
      tags:
        - backoffice
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Prayer'
      operationId: backoffice-get-prayer
      description: 'Backoffice: Get prayer request'
      security:
        - X-USER-TOKEN: []
      parameters: []
    parameters:
      - schema:
          type: string
        name: prayerId
        in: path
        required: true
    patch:
      summary: ''
      operationId: backoffice-update-prayer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Prayer'
      description: Backoffice update prayer request
      security:
        - X-USER-TOKEN: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PrayerRequest'
      tags:
        - backoffice
  /backoffice/transactions:
    get:
      summary: ''
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionsResponse'
      operationId: backoffice-get-transactions
      description: Get transactions
      security:
        - X-USER-TOKEN: []
      parameters:
        - schema:
            type: number
          in: query
          name: page
        - schema:
            type: number
          in: query
          name: limit
        - schema:
            type: string
          in: query
          name: search
      tags:
        - backoffice
    parameters: []
  '/backoffice/transactions/{transactionId}':
    get:
      summary: ''
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
      operationId: backoffice-get-transaction
      description: Get transaction
      security:
        - X-USER-TOKEN: []
      parameters: []
      tags:
        - backoffice
    parameters:
      - schema:
          type: string
        name: transactionId
        in: path
        required: true
components:
  schemas:
    AuthUser:
      type: object
      x-examples: {}
      properties:
        id:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        emailVerified:
          type: boolean
        avatar:
          type: string
          nullable: true
        avatarKey:
          type: string
          x-stoplight:
            id: 9euk9pvwruaul
          nullable: true
        channels:
          type: array
          items:
            type: string
            enum:
              - web
              - mobile
              - backoffice
        permissions:
          x-stoplight:
            id: m4ny04pa14clj
          type: array
          items:
            $ref: '#/components/schemas/Permission'
      required:
        - id
        - firstName
        - lastName
        - email
        - emailVerified
        - avatar
        - avatarKey
        - channels
        - permissions
    Podcast:
      type: object
      x-examples: {}
      properties:
        id:
          type: string
        author:
          type: string
        title:
          type: string
        description:
          type: string
        duration:
          type: string
        imageUrl:
          type: string
        audioUrl:
          type: string
        published:
          type: boolean
        publishedAt:
          type: string
        likesCount:
          type: number
          x-stoplight:
            id: mr8vf0hg801jl
      required:
        - id
        - author
        - title
        - description
        - duration
        - imageUrl
        - audioUrl
        - published
        - publishedAt
    Playlist:
      type: object
      x-examples:
        Example 1:
          id: 01HGN0RK7FYJH596PE0X8TTZH1
          title: Honour
          shortUrl: null
          description: ''
          createdAt: '2023-12-02T10:21:38.415726Z'
          podcasts:
            - id: 01HGN0RK7GKJ3MXARR598PN0DG
              author: Evangelist Elijah Ben
              title: 'SCIM UK Stages of honour and dishonour '
              summary: 'Render therefore to all their dues: tribute to whom tribute is due; custom to whom custom; fear to whom fear; honour to whom honour. Romans 13:7'
              description: 'Render therefore to all their dues: tribute to whom tribute is due; custom to whom custom; fear to whom fear; honour to whom honour. Romans 13:7'
              duration: '82:43'
              imageUrl: 'https://s3.amazonaws.com/podcasts-image-uploads/rev-elijah-ben-scim-6bbd0a95d-large.png'
              audioUrl: 'http://awscdn.podcasts.com/SCIM-UK-Stages-of-honour-and-dishonour--eebe.mp3'
              published: true
              publishedAt: '2020-10-19T13:54:06Z'
            - id: 01HGN0RK7GKJ3MXARR59WXVF1F
              author: Evangelist Elijah Ben
              title: Those Who Dishonour / Signs of Dishonour
              summary: 'ROMANS 13:7Render therefore to all their dues: tribute to whom tribute is due; custom to whom custom; fearto whom fear; honour to whom honour.'
              description: 'ROMANS 13:7Render therefore to all their dues: tribute to whom tribute is due; custom to whom custom; fearto whom fear; honour to whom honour.'
              duration: '93:39'
              imageUrl: 'https://s3.amazonaws.com/podcasts-image-uploads/rev-elijah-ben-scim-6bbd0a95d-large.png'
              audioUrl: 'http://awscdn.podcasts.com/Those-Who-Dishonour-Signs-of-Dishonour-d3e1.mp3'
              published: true
              publishedAt: '2020-10-19T08:02:37Z'
      properties:
        id:
          type: string
        title:
          type: string
        shortUrl:
          type: string
          nullable: true
        description:
          type: string
        createdAt:
          type: string
        podcasts:
          $ref: '#/components/schemas/Podcast'
      required:
        - id
        - title
        - shortUrl
        - description
        - createdAt
        - podcasts
    Prayer:
      type: object
      x-examples: {}
      properties:
        id:
          type: string
        title:
          type: string
        description:
          type: string
        phoneNumber:
          type: string
          x-stoplight:
            id: ce1dysgi7to05
        completedAt:
          type: string
          nullable: true
        createdAt:
          type: string
        status:
          type: string
          x-stoplight:
            id: 9brcin5hlkla3
          enum:
            - fulfilled
            - pending
            - rejected
            - closed
        user:
          $ref: '#/components/schemas/UserRel'
      required:
        - id
        - title
        - description
        - phoneNumber
        - completedAt
        - createdAt
        - status
        - user
    Event:
      type: object
      x-examples: {}
      properties:
        id:
          type: string
        title:
          type: string
        description:
          type: string
        excerptImage:
          type: string
        excerptImageKey:
          type: string
          x-stoplight:
            id: z40x1i8k5d5q4
        location:
          type: string
        startDateTime:
          type: string
        endDateTime:
          type: string
        published:
          type: boolean
        createdAt:
          type: string
      required:
        - id
        - title
        - description
        - excerptImage
        - excerptImageKey
        - location
        - startDateTime
        - endDateTime
        - published
        - createdAt
    Comment:
      type: object
      x-examples:
        Example 1:
          id: 01HGTH4JBT0KMPYW4KD505SAS0
          body: Lorem ipsum 3
          createdAt: '2023-12-04T13:44:00.122063Z'
          user:
            id: 01HGHB89XH660W6HDM3FWBAEVB
            firstName: Nana
            lastName: Aikinson
            email: nanaaikinson24@example.com
            emailVerified: true
            avatar: null
            channels:
              - web
      properties:
        id:
          type: string
        body:
          type: string
        createdAt:
          type: string
        user:
          $ref: '#/components/schemas/UserRel'
      required:
        - id
        - body
        - createdAt
        - user
    LoginRequest:
      type: object
      x-examples:
        Example 1:
          email: nanaaikinson24@example.com
          password: Pa$$w0rd
          channel: web
      properties:
        email:
          type: string
        password:
          type: string
        channel:
          type: string
          enum:
            - web
            - mobile
      required:
        - email
        - password
        - channel
    RegisterRequest:
      type: object
      x-examples:
        Example 1:
          firstName: Nana
          lastName: Aikinson
          email: nanaaikinson24@example.com
          password: Pa$$w0rd
          channel: web
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        channel:
          type: string
          enum:
            - web
            - mobile
      required:
        - firstName
        - lastName
        - email
        - password
        - channel
    CommentRequest:
      title: CommentRequest
      x-stoplight:
        id: ot54uyydj0o5x
      type: object
      properties:
        comment:
          type: string
          x-stoplight:
            id: s7t58bujmz14n
      required:
        - comment
    MessageResponse:
      title: MessageResponse
      x-stoplight:
        id: gmf8yx586fcto
      type: object
      properties:
        message:
          type: string
          x-stoplight:
            id: 5qg0odxm3vfca
      required:
        - message
    GetPodcastsResponse:
      type: object
      x-examples: {}
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Podcast'
        limit:
          type: integer
        page:
          type: integer
        total:
          type: integer
    LoginResponse:
      type: object
      x-examples:
        Example 1:
          tokens:
            access: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE3MDE5OTU0NjQsImlhdCI6MTcwMTk5MTg2NCwiaXNzIjoiY29tLnNjaW0uYXBwIiwicmVmZXJlbmNlIjoiMDFISDM5WFBEM1BLN0s5MkJNUEpEQzNWWVciLCJzdWIiOiIwMUhIMUtHTTlTMUgwODZHVjFFR1BGUDE2WCIsInRva2VuVHlwZSI6ImFjY2VzcyJ9.7P8hNDG-Ca74jVGVWPXXTmTWdQHKFHPfHtXWdjSrzb0
            refresh: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE3MDIwNzgyNjQsImlhdCI6MTcwMTk5MTg2NCwiaXNzIjoiY29tLnNjaW0uYXBwIiwicmVmZXJlbmNlIjoiMDFISDM5WFBEM1BLN0s5MkJNUEpEQzNWWVciLCJzdWIiOiIwMUhIMUtHTTlTMUgwODZHVjFFR1BGUDE2WCIsInRva2VuVHlwZSI6InJlZnJlc2gifQ.jJ68fSWIJQ9Is10CcfO1EvGkZxOBFpJ7wDgKeX7nCHk
          user:
            id: 01HH1KGM9S1H086GV1EGPFP16X
            firstName: Nana
            lastName: Aikinson
            email: nanaaikinson24@example.com
            emailVerified: true
            avatar: ''
            channels:
              - web
      properties:
        tokens:
          type: object
          required:
            - access
            - refresh
          properties:
            access:
              type: string
            refresh:
              type: string
        user:
          $ref: '#/components/schemas/AuthUser'
      required:
        - tokens
        - user
    RefreshTokenResponse:
      type: object
      x-examples:
        Example 1:
          access: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE3MDE5OTU2NjksImlhdCI6MTcwMTk5MjA2OSwiaXNzIjoiY29tLnNjaW0uYXBwIiwicmVmZXJlbmNlIjoiMDFISDNBM1hZUjBSWTdURTE1WkFIWDlCWUIiLCJzdWIiOiIwMUhIMUtHTTlTMUgwODZHVjFFR1BGUDE2WCIsInRva2VuVHlwZSI6ImFjY2VzcyJ9.ymFGjD7xGgHU1rfaUbZyUcjD9Nrh3odTifE4TzOJ1To
      properties:
        access:
          type: string
      required:
        - access
    PlaylistsResponse:
      type: array
      x-stoplight:
        id: b4m86sg966ryt
      x-examples: {}
      items:
        $ref: '#/components/schemas/Playlist'
    PrayersResponse:
      type: object
      x-examples: {}
      properties:
        limit:
          type: integer
          x-stoplight:
            id: ufvohk2yj0hsx
        page:
          type: integer
          x-stoplight:
            id: ufvohk2yj0hsx
        total:
          type: integer
          x-stoplight:
            id: ufvohk2yj0hsx
        items:
          type: array
          items:
            $ref: '#/components/schemas/Prayer'
      required:
        - limit
        - page
        - total
        - items
    CommentsResponse:
      type: array
      x-stoplight:
        id: f043d02f509bc
      x-examples:
        Example 1:
          - id: 01HGTH4JBT0KMPYW4KD505SAS0
            body: Lorem ipsum 3
            createdAt: '2023-12-04T13:44:00.122063Z'
            user:
              id: 01HGHB89XH660W6HDM3FWBAEVB
              firstName: Nana
              lastName: Aikinson
              email: nanaaikinson24@example.com
              emailVerified: true
              avatar: null
              channels:
                - web
      items:
        $ref: '#/components/schemas/Comment'
    EmailRequest:
      title: EmailRequest
      x-stoplight:
        id: 5fu8dtlpj6ocv
      type: object
      properties:
        email:
          type: string
          x-stoplight:
            id: 5awcv9b192ctu
      required:
        - email
    StorePlaylistRequest:
      type: object
      x-examples:
        Example 1:
          title: Honour
          description: ''
          podcasts:
            - 01HGHB7QZKWWX8VQD4KZ1DRMRX
            - 01HGHB7QZMR2T5YB9W9YYAPQKC
      properties:
        title:
          type: string
        description:
          type: string
        podcasts:
          type: array
          items:
            type: string
      required:
        - title
        - description
    PrayerRequest:
      type: object
      x-examples: {}
      properties:
        title:
          type: string
        description:
          type: string
        phoneNumber:
          type: string
          x-stoplight:
            id: itjqecfffw1l6
        countryCode:
          type: string
          x-stoplight:
            id: orgxyeb8y3gb1
        status:
          type: string
          x-stoplight:
            id: lzbytsmh7v0ds
          enum:
            - fulfilled
            - pending
            - rejected
            - closed
      required:
        - title
        - description
        - phoneNumber
        - countryCode
    HomeDataResponse:
      type: object
      x-examples: {}
      properties:
        latestAnnouncements:
          type: array
          items:
            $ref: '#/components/schemas/Post'
        latestPodcasts:
          type: array
          items:
            $ref: '#/components/schemas/Podcast'
        latestPosts:
          type: array
          items:
            $ref: '#/components/schemas/Post'
        upcomingEvents:
          type: array
          items:
            $ref: '#/components/schemas/Event'
      required:
        - latestAnnouncements
        - latestPodcasts
        - latestPosts
        - upcomingEvents
    FileResponse:
      type: object
      x-examples:
        Example 1:
          key: AVATAR/w6lG4ZUMcJ3DGMMXI27RW3VhZUT3BF.jpeg
          url: 'https://scimapp-test-uploads.s3.eu-west-1.amazonaws.com/AVATAR/w6lG4ZUMcJ3DGMMXI27RW3VhZUT3BF.jpeg?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAW3W3GZGQ66DHX5JB%2F20231206%2Feu-west-1%2Fs3%2Faws4_request&X-Amz-Date=20231206T214742Z&X-Amz-Expires=604800&X-Amz-SignedHeaders=host&x-id=GetObject&X-Amz-Signature=59faf96a872cb412eedf345a0874c5323874afbbf08d3452b230afffc1ef25a1'
      properties:
        key:
          type: string
        url:
          type: string
      required:
        - key
        - url
    PlaylistPodcastsRequest:
      type: object
      x-examples:
        Example 1:
          podcasts: []
      properties:
        podcasts:
          type: array
          items:
            type: string
      required:
        - podcasts
    EventsResponse:
      type: object
      x-stoplight:
        id: 09td3cquu09hj
      x-examples:
        Example 1:
          items:
            - id: 01HHAM7SDVSZBX67XBJWC4F8G6
              title: Test event 3
              description: Test description
              excerptImage: ''
              location: test location 2
              startDateTime: '0000-12-31T23:43:52-00:16'
              endDateTime: '0000-12-31T23:43:52-00:16'
              published: false
              createdAt: '2023-12-10T19:46:02.299722Z'
            - id: 01HHAM7SDZJNN74F3HN0ZSCFX9
              title: Test event 3
              description: Test description
              excerptImage: ''
              location: test location 2
              startDateTime: '0000-12-31T23:43:52-00:16'
              endDateTime: '0000-12-31T23:43:52-00:16'
              published: false
              createdAt: '2023-12-10T19:46:02.303918Z'
            - id: 01HHAM7SECNFH1VJWHH6E8ZDVD
              title: Test event 3
              description: Test description
              excerptImage: ''
              location: test location 2
              startDateTime: '0000-12-31T23:43:52-00:16'
              endDateTime: '0000-12-31T23:43:52-00:16'
              published: false
              createdAt: '2023-12-10T19:46:02.31655Z'
            - id: 01HHAM7SM3KXJZEAY4ZS41ZF2J
              title: Test event 3
              description: Test description
              excerptImage: ''
              location: test location 2
              startDateTime: '0000-12-31T23:43:52-00:16'
              endDateTime: '0000-12-31T23:43:52-00:16'
              published: false
              createdAt: '2023-12-10T19:46:02.499953Z'
          limit: 10
          page: 2
          total: 14
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Event'
        limit:
          type: integer
        page:
          type: integer
        total:
          type: integer
      required:
        - items
        - limit
        - page
        - total
      title: ''
    EventRequest:
      type: object
      x-examples: {}
      properties:
        title:
          type: string
        description:
          type: string
        location:
          type: string
        published:
          type: boolean
          x-stoplight:
            id: on2oxt69hgfkk
        startDateTime:
          type: string
        endDateTime:
          type: string
        excerptImage:
          type: string
      required:
        - title
        - description
        - location
        - published
        - startDateTime
        - endDateTime
    Post:
      type: object
      x-examples:
        Example 1:
          id: 01HHH61PCD95D8PCAFDWH54E1P
          title: Test post
          slug: test-post
          body: Test body
          published: true
          excerptImage: ''
          excerptImageKey: ''
          isAnnouncement: false
          minutesToRead: 1.5
          createdAt: '2023-12-13T08:52:43.533Z'
          user:
            id: 01HHH5M48X7QR4TMPMT5DFHGQ8
            firstName: Nana
            lastName: Aikinson
            email: nanaaikinson24@gmail.com
            emailVerified: true
            avatar: ''
            channels:
              - mobile
          likesCount: 0
          commentsCount: 0
      properties:
        id:
          type: string
        title:
          type: string
        slug:
          type: string
        body:
          type: string
        published:
          type: boolean
        excerptImage:
          type: string
        excerptImageKey:
          type: string
          x-stoplight:
            id: ox8a8hxeu6lb2
        isAnnouncement:
          type: boolean
        minutesToRead:
          type: number
        createdAt:
          type: string
        user:
          $ref: '#/components/schemas/UserRel'
        likesCount:
          type: integer
        commentsCount:
          type: integer
      required:
        - id
        - title
        - slug
        - body
        - published
        - excerptImage
        - excerptImageKey
        - isAnnouncement
        - minutesToRead
        - createdAt
        - user
        - likesCount
        - commentsCount
    PostsResponse:
      type: object
      x-examples:
        Example 1:
          items:
            - id: 01HHH61PCD95D8PCAFDWH54E1P
              title: Test post
              slug: test-post
              body: Test body
              published: true
              excerptImage: ''
              isAnnouncement: false
              minutesToRead: 1.5
              createdAt: '2023-12-13T08:52:43.533Z'
              user:
                id: 01HHH5M48X7QR4TMPMT5DFHGQ8
                firstName: Nana
                lastName: Aikinson
                email: nanaaikinson24@gmail.com
                emailVerified: true
                avatar: ''
                channels:
                  - mobile
              likesCount: 0
              commentsCount: 0
            - id: 01HHH67MND3FCHSDVH65PMPQ4R
              title: Test post 2
              slug: test-post-2
              body: Test body
              published: true
              excerptImage: ''
              isAnnouncement: false
              minutesToRead: 1.5
              createdAt: '2023-12-13T08:55:58.382Z'
              user:
                id: 01HHH5M48X7QR4TMPMT5DFHGQ8
                firstName: Nana
                lastName: Aikinson
                email: nanaaikinson24@gmail.com
                emailVerified: true
                avatar: ''
                channels:
                  - mobile
              likesCount: 0
              commentsCount: 0
            - id: 01HHH69D5C0QVQH6WYVVDF0AB5
              title: Test post 3
              slug: test-post-3
              body: Test body
              published: true
              excerptImage: ''
              isAnnouncement: false
              minutesToRead: 1.5
              createdAt: '2023-12-13T08:56:56.236Z'
              user:
                id: 01HHH5M48X7QR4TMPMT5DFHGQ8
                firstName: Nana
                lastName: Aikinson
                email: nanaaikinson24@gmail.com
                emailVerified: true
                avatar: ''
                channels:
                  - mobile
              likesCount: 0
              commentsCount: 0
          limit: 10
          page: 1
          total: 3
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Post'
        limit:
          type: integer
        page:
          type: integer
        total:
          type: integer
      required:
        - items
        - limit
        - page
        - total
    StorePostRequest:
      type: object
      x-examples:
        Example 1:
          title: Test post 3
          body: Test body
          published: true
          minutesToRead: 1.5
          excerptImageUrl: ''
      properties:
        title:
          type: string
        body:
          type: string
        published:
          type: boolean
        minutesToRead:
          type: number
        excerptImage:
          type: string
          x-stoplight:
            id: hyjedg14jniru
        isAnnouncement:
          type: boolean
          x-stoplight:
            id: f2rpl2seaubc6
      required:
        - title
        - body
        - published
        - minutesToRead
        - isAnnouncement
    VerifyEmailRequest:
      type: object
      x-stoplight:
        id: 9cad4275294e8
      x-examples:
        Example 1:
          email: nanaaikinson2020@gmail.com
          code: '378801'
          action: account_verification
      properties:
        email:
          type: string
        code:
          type: string
        action:
          type: string
          x-stoplight:
            id: isqojezx3vnyd
          enum:
            - reset_password
            - account_verification
      required:
        - email
        - code
    UpdateAvatarRequest:
      type: object
      x-examples:
        Example 1:
          action: update
          avatarKey: AVATAR/qPPdIWhxEO1wowHqMxTe7VMoDHLrFf.jpeg
      properties:
        action:
          type: string
          enum:
            - update
            - remove
        avatarKey:
          type: string
      required:
        - action
        - avatarKey
    UpdateAvatarResponse:
      type: object
      x-examples:
        Example 1:
          avatarUrl: 'https://scimapp-test-uploads.s3.eu-west-1.amazonaws.com/AVATAR/qPPdIWhxEO1wowHqMxTe7VMoDHLrFf.jpeg?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAW3W3GZGQ66DHX5JB%2F20231213%2Feu-west-1%2Fs3%2Faws4_request&X-Amz-Date=20231213T185058Z&X-Amz-Expires=604800&X-Amz-SignedHeaders=host&x-id=GetObject&X-Amz-Signature=cc8869c70d911edc3f60ffb9029ed2730b57a153b4bc72bb144b7a494ca2feae'
          message: Avatar updated successfully
      properties:
        avatarUrl:
          type: string
        message:
          type: string
      required:
        - avatarUrl
        - message
    UpdateUserDetailsRequest:
      type: object
      x-examples:
        Example 1:
          firstName: Kwesi
          lastName: Arthur
          phoneNumber: '0241726707'
          countryCode: GH
      properties:
        firstName:
          type: string
        lastName:
          type: string
        phoneNumber:
          type: string
        countryCode:
          type: string
      required:
        - firstName
        - lastName
    VerifyCodeResponse:
      title: VerifyCodeResponse
      x-stoplight:
        id: kvt06uja7e5wn
      type: object
      properties:
        message:
          type: string
          x-stoplight:
            id: kqanhtlwe8snp
        key:
          type: string
          x-stoplight:
            id: tf7fbsuvckavu
      required:
        - message
        - key
    VerifyAccountRequest:
      title: VerifyAccountRequest
      x-stoplight:
        id: pwzgpv6ggr130
      type: object
      properties:
        key:
          type: string
          x-stoplight:
            id: 15j5s2pa7t9vp
        email:
          type: string
          x-stoplight:
            id: uf5tda0wt9fgv
      required:
        - key
        - email
    ResetPasswordRequest:
      title: ResetPasswordRequest
      x-stoplight:
        id: djnanx7qhejqs
      type: object
      properties:
        key:
          type: string
          x-stoplight:
            id: nrfoxetniboyf
        email:
          type: string
          x-stoplight:
            id: 10xsjngek7tjp
        password:
          type: string
          x-stoplight:
            id: maq0kigyjsjst
        passwordConfirmation:
          type: string
          x-stoplight:
            id: yry1vj7b79wqs
      required:
        - key
        - email
        - password
        - passwordConfirmation
    SocialAuthRequest:
      title: SocialAuthRequest
      x-stoplight:
        id: zvouocf5u1t2p
      type: object
      properties:
        token:
          type: string
          x-stoplight:
            id: b58i2mzuzpeu1
        channel:
          type: string
          x-stoplight:
            id: 63644o4pyzxf0
          enum:
            - web
            - mobile
        provider:
          type: string
          x-stoplight:
            id: gx48sdedd0ech
          enum:
            - apple
            - google
      required:
        - token
        - channel
        - provider
    Transaction:
      title: Transaction
      x-stoplight:
        id: g4t8s9n7hud6p
      type: object
      properties:
        id:
          type: string
        provider:
          type: string
          x-stoplight:
            id: e3gelmgwr9yyt
        currency:
          type: string
          x-stoplight:
            id: 6ewfky0ndjqsc
        amount:
          type: number
          x-stoplight:
            id: qxvjia8zzjif5
        type:
          type: string
          x-stoplight:
            id: 0f5gzeqimh8sy
          enum:
            - tithe
            - pledge
            - offertory
            - freewill
            - busing
            - covenant_partner
            - other
        method:
          type: string
          x-stoplight:
            id: y9bgb4hn1twf3
          enum:
            - card
            - bank
            - mobile_money
        status:
          type: string
          x-stoplight:
            id: uvsaaa25jki7k
          enum:
            - pending
            - success
            - failed
        description:
          type: string
          x-stoplight:
            id: 1dflwdat94ahl
        createdAt:
          type: string
          x-stoplight:
            id: tme5bdxe93exs
        user:
          $ref: '#/components/schemas/UserRel'
      required:
        - id
        - provider
        - currency
        - amount
        - type
        - method
        - status
        - description
        - createdAt
        - user
    TransactionsResponse:
      title: TransactionsResponse
      x-stoplight:
        id: b475o308472xr
      type: object
      properties:
        items:
          type: array
          x-stoplight:
            id: tklh7k1043gan
          items:
            $ref: '#/components/schemas/Transaction'
        limit:
          type: integer
          x-stoplight:
            id: r7o5xl505pdmf
        page:
          type: integer
          x-stoplight:
            id: qq8coyia6816s
        total:
          type: integer
          x-stoplight:
            id: qb49l8yadya80
      required:
        - items
        - limit
        - page
        - total
    TransactRequest:
      title: TransactRequest
      x-stoplight:
        id: fdetuxrcymcca
      type: object
      properties:
        idempotencyKey:
          type: string
          x-stoplight:
            id: 2qdfup86p1dn0
        amount:
          type: integer
          x-stoplight:
            id: cmav01bdegwvk
        type:
          type: string
          x-stoplight:
            id: zdbdcc6z6evae
          enum:
            - tithe
            - pledge
            - offertory
            - freewill
            - busing
            - covenant_partner
        currency:
          type: string
          x-stoplight:
            id: txld7y7utqozc
          enum:
            - USD
            - GHS
            - EUR
            - GBP
        AccountNumber:
          type: string
          x-stoplight:
            id: wgxsd8qm8vyrr
        method:
          type: string
          x-stoplight:
            id: 85co46fj603ay
          enum:
            - mobile_money
            - card
      required:
        - idempotencyKey
        - amount
        - type
        - currency
        - AccountNumber
        - method
    UserRel:
      title: UserRel
      x-stoplight:
        id: 119vawpz0g896
      type: object
      properties:
        id:
          type: string
          x-stoplight:
            id: yw5xe1ehzhqte
        firstName:
          type: string
          x-stoplight:
            id: sp8wdbteduk5d
        lastName:
          type: string
          x-stoplight:
            id: sp8wdbteduk5d
        email:
          type: string
          x-stoplight:
            id: sp8wdbteduk5d
        avatar:
          type: string
          x-stoplight:
            id: sp8wdbteduk5d
      required:
        - id
        - firstName
        - lastName
        - email
        - avatar
    Permission:
      type: object
      x-examples: {}
      properties:
        id:
          type: string
        displayName:
          type: string
        module:
          type: string
      required:
        - id
        - displayName
        - module
  securitySchemes:
    X-USER-TOKEN:
      type: apiKey
      in: header
      name: X-USER-TOKEN
x-internal: false
